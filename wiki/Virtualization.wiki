#Virtualization notes

= Virtualization notes =

* - verify you have hardware virtualization support*
 egrep "svm|vmx" /proc/cpuinfo

* Creating a filesystem*
 qemu-img create my_image.img 100G

* Create a COW filesystem*
  qemu-img create my_image.img -f qcow2 100G

* Create image to be used by multiple nodes using COW*
 qemu-img create -b my_image.img -f qcow2 node1.img

 qemu-img create -b my_image.img -f qcow2 node2.img

* console install using libvirt*
{{{
 virt-install -n my_domain -r 2048 --vcpus=2 \
             --disk path=/tmp/my_image.img,device=disk \
             --cdrom=/tmp/install_dvd.iso \
             --vnc --os-type linux --accelerate  --hvm
}}}
* connecting to the console*
 virt-viewer my_domain

* sending console to virtual serial port*
 virsh console my_domain # requires the following in domain image
{{{

/etc/securetty
ttyS1
ttyS0

/etc/inittab
s0:2345:respawn:/sbin/agetty -L 115200 ttyS0

/boot/grub/grub.conf
title linux
        root (hd0,0)
        kernel /boot/vmlinuz-2.6.9-55.ELsmp ro root=/dev/hda1 console=tty0 console=ttyS0,115200
        initrd /boot/initrd-2.6.9-55.ELsmp.img
}}}

* Virsh commands*
 virsh dumpxml DOMAIN # dump xml info on domain

 virsh define my_domain.xml # define a domain based on xml file

 virsh create my_domain.xml # start a domain based on xml file

 virsh start my_domain # start my domain, this domain will need defined.

 virsh shutdown my_domain # run init 0 on my domain

 virsh destroy my_domain # powers off my doamin

 virsh undefine my_domain # undefine the domain

 virsh edit my_domain # edit attributes of a domain.

 virt-viewer my_domain # 

* mounting a qemu or xen image on a loopback*
 Don't do this while the file is in use, else you will corrupt the image
{{{
 sfdisk -d my_image.img

 my_image.img1 : start=       63, size= 31439142, Id=83, bootable
 my_image.img2 : start= 31439205, size=  2104515, Id=82
 my_image.img3 : start=        0, size=        0, Id= 0
 my_image.img4 : start=        0, size=        0, Id= 0
}}}
 only one partition, which is "/". you need to offset the mount. So you multiply 63*512=32256 and
{{{
 mount -o loop,offset=32256 my_image.img /mnt
}}}
 If you have more partitions, just multiply the start location by 512 and that is your offset.

* making a XEN image into a KVM image*
 Sorry, but this is a hack. I start by making a install image with qemu-img. I then do a virt-install to that image. I let the install go until it has partitioned and formatted the image. While this is going on. I dump the xml info on the domain. Once the format is done, I then virsh destory my_domain.

 I then loopback mount the image I just created and the XEN image. I then 
{{{
 rsync -av --delete /xen_mount_point/ /kvm_mount_point/
}}}
 note you may have more then one partition so you need to deal with that.

 Now you need to go into the KVM image and make some edits, namely grub.conf, and fstab to make sure they match up with your current partition layout. Note in grub.conf your kernel may have been something like /vmlinuz, but because you only have one partition it would need to be /boot/vmlinuz. Same for the initrd.

 now unmount all these loopbacks.

 You now need to fix grub to work on the new image. I edit the xml file that I dumped, and change my boot device and iso location.
{{{
 <boot dev='cdrom'/>
}}}
{{{
    <disk type='file' device='cdrom'>
      <source file='/tmp/install_dvd.iso'/>
      <target dev='hdc' bus='ide'/>
      <readonly/>
    </disk>
}}}

 then virsh create my_xml_dump.xml and go into rescue mode. Once in rescue mode, I chroot into my image and run:
{{{
 grub-install /dev/hda --recheck
}}}

 logout and shutdown the image. I then edit the xml image again, change dev='cdrom' to dev='hd' and remove the source file of the cdrom area. I then boot my new KVM image.

 What a hack! Haven't looked, I am sure I can pass to virsh boot info and source files for cdrom. Not sure how to get around the grub install piece.

* Bridging a interface for domU using KVM*
 On host node
{{{
ifconfig virbr0 down

cat /etc/sysconfig/network-scripts/ifcfg-eth1 
DEVICE=eth1
ONBOOT=yes
BRIDGE=br0

cat /etc/sysconfig/network-scripts/ifcfg-br0
DEVICE=br0
ONBOOT=yes
TYPE=Bridge
}}}
 And in the XML file for the node
{{{
    <interface type='bridge'>
      <source bridge='br0'/>
      <mac address='00:16:3E:4D:65:05'/>
    </interface>
}}}